rep(c(0,1,2),times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect<1
tf
num_vect >= 6
my_car <- c("My","name","is")
my_char <- c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Illyes Laszlo")
my_name
my_name <- paste(my_name,collapse=" ")
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","y","Z"),sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4,sep="_")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
bye()
swirl()
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) &  x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vext
vect
names(vect)
vext2 <- c(11,2,NA)
c(11,2,NA)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(my_matrix)
my_matrix2 <- matrix(1:20, nrow=4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <-c("Bill","Gina","Kelly")
patients <-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,_my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
swirl()
swirl()
library(swirl)
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
NOT(5!-7)
NOT(5!=7)
NOT(5==7)
?NOT
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && (TRUE,FALSE,FALSE)
TRUE && C(TRUE,FALSE,FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 ||
| 6 != 8 && 4 > 3.9
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical("twins","twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
bye()
exit
x<-1:4
lapply(x,runif,min=0,max=10)
library(swirl)
swirl()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(std,c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
telegram("What the f is going on?")
submit()
submit()
mad_libs(place="Ohio", adjective = "kiss", noun = "go on")
mad_libs(place="Ohio", adjective = "kiss", noun = "go on")
submit()
"I" %p% "love" %p% "R!"
library(swirl)
swirl()
head)flags
head(flags)
dim(flags)
class(flags)?
?
###
#
class(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vector)
class(cls_vect)
sum(flag$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
library(datasets)
data(iris)
?iris
Sepal.Length(iris)
iris(Sepal.Length)
iris[Sepal.Length=="virginica"]
head(iris)
x<-subset(iris,Species=="virginica")
x
sapply(x,mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
y<-apply(mtcars, 2, mean)
y
z<-split(mtcars, mtcars$cyl)
z
w<-with(mtcars, tapply(mpg, cyl, mean))
w
q<-tapply(mtcars$cyl, mtcars$mpg, mean)
q
debug(ls)
ls(1,10)
exit
quit
quit()
head(mtcars)
x<-subset(mtcars,cyl=6)
x<-subset(mtcars,cyl=4)
y<-subset(mtcars,cyl=8)
dif<-sapply(y,mean)-sapply(x,mean)
dif
xm<-mean(x["hp"])
xm<-mean(x$hp)
xm<-mean(y$hp)
ym<-mean(y$hp)
xm<-mean(x$hp)
x
y
library(datasets)
data(mtcars)
x<-subset(mtcars,cyl=4)
x
x<-subset(mtcars,cyl="4")
x
mtcars
x<-subset(mtcars,mtcars$cyl="4")
x<-subset(mtcars,mtcars$cyl=4)
x<-subset(mtcars,mtcars$cyl==4)
x
y<-subset(mtcars,mtcars$cyl==8)
dif<-mean(y["hp"])-mean(x["hp"])
dif<-mean(y$hp)-mean(x$hp)
dif
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
library(swirl)
swirl()
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
summary(population)
summary("population")
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head9plants,10
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(genalg)
library(ggplot2)
package?
()
install.packages("genalg")
install.packages("ggplot2")
library(genalg)
library(ggplot2)
dataset <- data.frame(item = c("pocketknife", "beans", "potatoes", "unions",
"sleeping bag", "rope", "compass"), survivalpoints = c(10, 20, 15, 2, 30,
10, 30), weight = c(1, 5, 10, 1, 7, 5, 1))
weightlimit <- 20
dataset
evalFunc <- function(x) {
current_solution_survivalpoints <- x %*% dataset$survivalpoints
current_solution_weight <- x %*% dataset$weight
if (current_solution_weight > weightlimit)
return(0) else return(-current_solution_survivalpoints)
}
iter = 100
GAmodel <- rbga.bin(size = 7, popSize = 200, iters = iter, mutationChance = 0.01,
elitism = T, evalFunc = evalFunc)
cat(summary.rbga(GAmodel))
x<-{1 2 3 4 5 6 7 8 9 10}
y<-numeric(15)
y<-numeric(1:15)
y[1]<-1
y[2]<2
y[2]<-2
for(i in 1:length(y)){y[i]<-i}
makeVektor(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVektor(y)
makeVector(y)
makeVector$get
makeVector$get()
get
get()
get(x)
get(y)
x={1 2,3 5}
B = matrix(
+   c(2, 4, 3, 1, 5, 7),
+   nrow=3,
+   ncol=2)
B = matrix(c(2, 4, 3, 1, 5, 7),  nrow=3,  ncol=2)
B
B<-b(1:2,1:2)
B<-b(1:2,1:2)
B<-B(1:2,1:2)
B = matrix(c(2, 4, 3, 1),  nrow=2,  ncol=2)
solve(B)
B*solve(B)
solve(B)*B
install.packages("swirl")
library(swirl)
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips<-sample(0:1,100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(1,size=100,prob=0.7)
flips2<-rbinom(n=100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
unclass(t1)
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1,units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot()
plot(dist,speed)
plot(cars$dist,cras$speed)
plot(cars$dist,cars$speed)
plot(x=speed,y=cars$dist)
plot(cars$dist,cars$speed,"Speed")
plot(x=cars$speed,y=cars$dist,clab="Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, lab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
?plot
plot(x = cars$speed, y = cars$dist, main="main")
plot(x = cars$speed, y = cars$dist, main="main")
windows()
?windows
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
qplot(votes, rating, data = movies)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
dir()
setwd("exdata_plotting1")
# read the file
myData<-read.csv("household_power_consumption.txt", header = TRUE,sep = ";",
na.strings="?",
colClasses = c("character","character","numeric","numeric","numeric",
"numeric","numeric","numeric","numeric"))
#myData<-read.csv("household_power_consumption.txt", header = TRUE,sep = ";")
#read the first day data
myD1<-subset(myData,Date=="1/2/2007")
#read the second day data
myD2<-subset(myData,Date=="2/2/2007")
#change the data format for both
myD1$Date<-"2007-02-01"
myD2$Date<-"2007-02-02"
#delete the BIG data
rm("myData")
#put the two days in one dataframe
myData<-rbind(myD1,myD2)
#delete the dataframes not used
rm("myD1")
rm("myD2")
# transform the date in date format
myData$Date<-as.Date(myData$Date)
png('plot1.png',width=480, height=480)
h<-hist(myData$Global_active_power,breaks=12,col="red",xlab="Global Active Power (kilowatts)",
main="Global Active Power")
dev.off()
plot(myData$Date,myData$Global_active_power)
head(myData)
plot(Time,myData$Global_active_power,ylab="Global Active Power (kilowatts)")
plot(myData$Time,myData$Global_active_power,ylab="Global Active Power (kilowatts)")
plot(paste0(myData$Date,myData$Time),myData$Global_active_power,ylab="Global Active Power (kilowatts)")
# read the file
myData<-read.csv("household_power_consumption.txt", header = TRUE,sep = ";",
na.strings="?",
colClasses = c("character","character","numeric","numeric","numeric",
"numeric","numeric","numeric","numeric"))
#myData<-read.csv("household_power_consumption.txt", header = TRUE,sep = ";")
#read the first day data
myD1<-subset(myData,Date=="1/2/2007")
#read the second day data
myD2<-subset(myData,Date=="2/2/2007")
#change the data format for both
myD1$Date<-"2007-02-01"
myD2$Date<-"2007-02-02"
#delete the BIG data
rm("myData")
#put the two days in one dataframe
myData<-rbind(myD1,myD2)
#delete the dataframes not used
rm("myD1")
rm("myD2")
png('plot1.png',width=480, height=480)
hist(myData$Global_active_power,breaks=12,col="red",xlab="Global Active Power (kilowatts)",
main="Global Active Power")
dev.off()
